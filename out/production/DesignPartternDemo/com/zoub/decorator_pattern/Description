一、装饰者模式的概念
装饰者模式又名包装（Wrapper）模式。装饰者模式以对客户端的透明的方式扩展对象的功能，
是继承关系的一个替代方案。

装饰者模式动态地将责任附加到对象身上。若要拓展功能，装饰者提供了比继承更有弹性的替代方案。

二、装饰者模式的结构
装饰者模式以对客户端透明的方式动态地给一个对象附加上更多责任。换言之，客户端并不会觉得对象在装饰前
和装饰后有什么不同。装饰者模式可以在不使用创造更多子类的情况下，将对象的功能加以扩展。

在装饰者模式中的角色有：
1.抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加责任的对象。
2.具体构件（ConcreteComponent）角色：定义一个将要接收附加责任的类。
3.装饰（Decorate）角色：持有一个构件（Component）对象的实例，并定义一个与抽象构件一致的接口。
4.具体装饰（ConcreteDecorate）角色：负责给构件对象“贴上”附加的责任。

抽象构件角色

public interface Component {

    public void sampleOperation();

}
具体构件角色

public class ConcreteComponent implements Component {

    @Override
    public void sampleOperation() {
        // 写相关的业务代码
    }
}
装饰角色

public class Decorator implements Component{
    private Component component;

    public Decorator(Component component){
        this.component = component;
    }

    @Override
    public void sampleOperation() {
        // 委派给构件
        component.sampleOperation();
    }
}
具体装饰角色

public class ConcreteDecoratorA extends Decorator {

    public ConcreteDecoratorA(Component component) {
        super(component);
    }

    @Override
    public void sampleOperation() {
      // 写相关的业务代码
　　　super.sampleOperation();
     // 写相关的业务代码
    }
}

三、装饰者模式的一些变化
1.装饰者模式的简化
如果只有一个ConcreteComponent类，那么可以考虑去掉抽象的Component类（接口），
把Decorator作为一个ConcreteComponent子类。

如果只有一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，而可以把Decorator和
ConcreteDecorator的责任合并成一个类。甚至在只有ConcreteDecorator类的情况下，都可以这样做。

2.透明性的要求
装饰者模式对客户端的透明性要求程序不要声明一个ConcreteComponent类型的变量，而应当声明一个Component
类型的变量。

用孙悟空的例子来说，必须永远把孙悟空的所有变化都当成孙悟空来对待，而如果把老孙变成的鱼儿当成鱼儿，
而不是老孙，那就被老孙骗了，而这是不应当发生的。下面的做法是对的：
TheGreateSage sage = new Monkey();
TheGreateSage bird = new Bird(sage);
而下面的做法是不对的：
Monkey sage = new Monkey();
Bird bird = new Bird(sage);

3.半透明的装饰者模式
然而，纯粹的装饰者模式很难找到。装饰者模式的用意是在不改变接口的前提下，增强所考虑的类的性能。
在增强性能的时候，往往需要建立新的公开的方法。即便是在孙大圣的系统里，也需要新的方法。
比如齐天大圣类并没有飞行的能力，而鸟儿有。这就意味着鸟儿应当有一个新的fly()方法。再比如，
齐天大圣类并没有游泳的能力，而鱼儿有，这就意味着在鱼儿类里应当有一个新的swim()方法。

这就导致了大多数的装饰者模式的实现都是“半透明”的，而不是完全透明的。换言之，允许装饰者模式改变接口，
增加新的方法。这意味着客户端可以声明ConcreteDecorator类型的变量，从而可以调用ConcreteDecorator类中才
有的方法：

TheGreatestSage sage = new Monkey();
Bird bird = new Bird(sage);
bird.fly();

半透明的装饰者模式是介于装饰者模式和适配器模式之间的。适配器模式的用意是改变所考虑的类的接口，
也可以通过改写一个或几个方法，或增加新的方法来增强或改变所考虑的类的功能。大多数的装饰者模式
实际上是半透明的装饰者模式，这样的装饰者模式也称做半装饰、半适配器模式。


五、装饰者模式的优缺点
装饰模式的优点
　　（1）装饰模式与继承关系的目的都是要扩展对象的功能，但是装饰模式可以提供比继承更多的灵活性。
装饰模式允许系统动态决定“贴上”一个需要的“装饰”，或者除掉一个不需要的“装饰”。继承关系则不同
，继承关系是静态的，它在系统运行前就决定了。

　　（2）通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。

装饰模式的缺点
　　由于使用装饰模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。
但是，在另一方面，使用装饰模式会产生比使用继承关系更多的对象。更多的对象会使得查错变得困难，
特别是这些对象看上去都很相像。